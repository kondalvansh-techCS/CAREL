#!/usr/bin/env python3
"""
Professional Report Generator for CAREL v2.0
Creates clean, professional security assessment reports
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
import html

class ReportGenerator:
    def __init__(self, config, logger):
        self.config = config
        self.logger = logger
    
    def generate_service_scan_report(self, scan_results: Dict) -> str:
        """Generate professional service scan report"""
        report = []
        
        # Header
        report.append("üîç NETWORK SERVICE ASSESSMENT REPORT")
        report.append("=" * 60)
        report.append(f"Target: {scan_results.get('target', 'Unknown')}")
        report.append(f"Scan Date: {scan_results.get('timestamp', 'Unknown')}")
        report.append(f"Report Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        # Executive Summary
        summary = scan_results.get('summary', {})
        report.append("üìä EXECUTIVE SUMMARY")
        report.append("-" * 30)
        report.append(f"Total Services Scanned: {summary.get('total_services', 0)}")
        report.append(f"Identified Services: {summary.get('identified_services', 0)}")
        report.append(f"High Risk Services: {summary.get('high_risk_services', 0)}")
        report.append(f"Critical Vulnerabilities: {summary.get('critical_vulnerabilities', 0)}")
        report.append("")
        
        # Risk Assessment
        report.append("‚ö†Ô∏è RISK ASSESSMENT")
        report.append("-" * 20)
        
        risk_counts = {"Critical": 0, "High": 0, "Medium": 0, "Low": 0}
        for service in scan_results.get('services', []):
            risk = service.get('risk_level', 'Low')
            risk_counts[risk] = risk_counts.get(risk, 0) + 1
        
        for risk_level in ["Critical", "High", "Medium", "Low"]:
            count = risk_counts.get(risk_level, 0)
            icon = "üî¥" if risk_level == "Critical" else "üü°" if risk_level == "High" else "üü†" if risk_level == "Medium" else "üü¢"
            report.append(f"{icon} {risk_level}: {count} services")
        report.append("")
        
        # Detailed Findings
        report.append("üìã DETAILED FINDINGS")
        report.append("=" * 50)
        
        services = scan_results.get('services', [])
        if not services:
            report.append("No services were identified during the scan.")
            report.append("")
        else:
            # Group by risk level
            by_risk = {}
            for service in services:
                risk = service.get('risk_level', 'Low')
                if risk not in by_risk:
                    by_risk[risk] = []
                by_risk[risk].append(service)
            
            # Show highest risk first
            for risk_level in ["Critical", "High", "Medium", "Low"]:
                if risk_level in by_risk:
                    report.append(f"üéØ {risk_level.upper()} RISK SERVICES")
                    report.append("-" * 30)
                    
                    for service in by_risk[risk_level]:
                        self._add_service_details(report, service)
                    report.append("")
        
        # Recommendations
        report.append("üí° SECURITY RECOMMENDATIONS")
        report.append("=" * 35)
        
        recommendations = self._generate_recommendations(scan_results)
        for i, rec in enumerate(recommendations, 1):
            report.append(f"{i}. {rec}")
        report.append("")
        
        # Technical Details
        report.append("üîß TECHNICAL DETAILS")
        report.append("=" * 25)
        report.append("Service fingerprints and banners collected during the scan:")
        report.append("")
        
        for service in services:
            if service.get('banner'):
                report.append(f"Port {service['port']} ({service['service']}):")
                report.append(f"  Banner: {service['banner'][:100]}{'...' if len(service['banner']) > 100 else ''}")
                report.append("")
        
        # Footer
        report.append("=" * 60)
        report.append("Generated by CAREL v2.0 - Comprehensive Automated Reconnaissance & Exploitation Launcher")
        report.append("=" * 60)
        
        return "\n".join(report)
    
    def _add_service_details(self, report: List[str], service: Dict):
        """Add detailed service information to report"""
        risk_icon = {
            "Critical": "üî¥", "High": "üü°", 
            "Medium": "üü†", "Low": "üü¢", "Unknown": "‚ö™"
        }.get(service.get('risk_level', 'Unknown'), "‚ö™")
        
        report.append(f"{risk_icon} Port {service['port']}: {service['service']} {service['version']}")
        report.append(f"   Risk Level: {service['risk_level']}")
        
        # Vulnerabilities
        vulns = service.get('vulnerabilities', [])
        if vulns:
            report.append(f"   Vulnerabilities: {len(vulns)} found")
            for vuln in vulns[:3]:  # Show first 3 vulnerabilities
                risk_icon = "üî¥" if vuln.get('risk') == 'Critical' else "üü°" if vuln.get('risk') == 'High' else "üü†"
                report.append(f"     {risk_icon} {vuln.get('cve', 'Unknown')}")
            if len(vulns) > 3:
                report.append(f"     ... and {len(vulns) - 3} more")
        else:
            report.append("   Vulnerabilities: None identified")
        
        # Additional info
        if service.get('protocol_info'):
            proto_info = service['protocol_info']
            if 'security_headers' in proto_info:
                missing_headers = [k for k, v in proto_info['security_headers'].items() if v == 'Missing']
                if missing_headers:
                    report.append(f"   Missing Security Headers: {', '.join(missing_headers[:3])}")
        
        report.append("")  # Empty line between services
    
    def _generate_recommendations(self, scan_results: Dict) -> List[str]:
        """Generate security recommendations based on findings"""
        recommendations = []
        services = scan_results.get('services', [])
        
        # Check for critical services
        critical_services = [s for s in services if s.get('risk_level') in ['Critical', 'High']]
        if critical_services:
            recommendations.append("Immediately address high-risk services on ports: " + 
                                ", ".join(str(s['port']) for s in critical_services))
        
        # Check for outdated services
        outdated_services = [s for s in services if s.get('vulnerabilities')]
        if outdated_services:
            recommendations.append("Update or patch services with known vulnerabilities")
        
        # Check for insecure protocols
        insecure_protocols = [s for s in services if s.get('service') in ['Telnet', 'FTP']]
        if insecure_protocols:
            recommendations.append("Replace insecure protocols (Telnet/FTP) with SSH/SFTP")
        
        # General recommendations
        recommendations.extend([
            "Implement network segmentation for critical services",
            "Enable logging and monitoring for all network services",
            "Regularly update and patch all network services",
            "Conduct periodic security assessments",
            "Implement firewall rules to restrict unnecessary service access"
        ])
        
        return recommendations
    
    def save_html_report(self, scan_results: Dict, filename: str) -> str:
        """Generate and save an HTML report"""
        html_content = self._generate_html_report(scan_results)
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
            self.logger.info(f"‚úÖ HTML report saved to: {filename}")
            return filename
        except Exception as e:
            self.logger.error(f"‚ùå Failed to save HTML report: {e}")
            return None
    
    def _generate_html_report(self, scan_results: Dict) -> str:
        """Generate HTML version of the report"""
        services = scan_results.get('services', [])
        
        html_report = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>Network Service Assessment - {scan_results.get('target', 'Unknown')}</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .header {{ background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }}
                .summary {{ background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }}
                .service {{ border: 1px solid #bdc3c7; padding: 15px; margin: 10px 0; border-radius: 5px; }}
                .critical {{ border-left: 5px solid #e74c3c; }}
                .high {{ border-left: 5px solid #e67e22; }}
                .medium {{ border-left: 5px solid #f39c12; }}
                .low {{ border-left: 5px solid #27ae60; }}
                .vuln {{ color: #c0392b; font-weight: bold; }}
                .recommendation {{ background: #d5dbdb; padding: 10px; margin: 5px 0; border-radius: 3px; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üîç Network Service Assessment Report</h1>
                <p><strong>Target:</strong> {html.escape(scan_results.get('target', 'Unknown'))}</p>
                <p><strong>Scan Date:</strong> {html.escape(scan_results.get('timestamp', 'Unknown'))}</p>
            </div>
            
            <div class="summary">
                <h2>üìä Executive Summary</h2>
                <p>Total Services Scanned: {len(services)}</p>
                <p>Identified Services: {sum(1 for s in services if s.get('service') != 'Unknown')}</p>
                <p>High Risk Services: {sum(1 for s in services if s.get('risk_level') in ['High', 'Critical'])}</p>
            </div>
            
            <h2>üìã Service Details</h2>
        """
        
        for service in services:
            risk_class = service.get('risk_level', 'low').lower()
            html_report += f"""
            <div class="service {risk_class}">
                <h3>Port {service['port']}: {html.escape(service['service'])} {html.escape(service['version'])}</h3>
                <p><strong>Risk Level:</strong> {service['risk_level']}</p>
                <p><strong>Banner:</strong> {html.escape(service.get('banner', '')[:200])}</p>
            """
            
            vulns = service.get('vulnerabilities', [])
            if vulns:
                html_report += "<p class='vuln'><strong>Vulnerabilities:</strong></p><ul>"
                for vuln in vulns:
                    html_report += f"<li>{html.escape(vuln.get('cve', 'Unknown'))} - {vuln.get('risk', 'Unknown')}</li>"
                html_report += "</ul>"
            
            html_report += "</div>"
        
        # Recommendations
        html_report += """
            <h2>üí° Security Recommendations</h2>
        """
        
        recommendations = self._generate_recommendations(scan_results)
        for rec in recommendations:
            html_report += f'<div class="recommendation">{html.escape(rec)}</div>'
        
        html_report += """
            <div style="margin-top: 40px; padding: 20px; background: #34495e; color: white; border-radius: 5px;">
                <p>Generated by CAREL v2.0 - Comprehensive Automated Reconnaissance & Exploitation Launcher</p>
                <p>Report generated on: """ + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + """</p>
            </div>
        </body>
        </html>
        """
        
        return html_report
